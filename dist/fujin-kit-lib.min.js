(function () {
  'use strict';

  const theme = {
      colors: {
      
      text: '#10375C',        // Dark Blue (Text Color)
          background: '#F4F6FF',  // Soft Light Blue (Background Color)
      success: '#28a745',      // Success Green
      error: '#dc3545',        // Error Red
      info: '#17a2b8',         // Info Blue
          warning: '#ffc107',  
      
          primary: '#b2182b',
  secondary: '#f8e7ea',
          tertiary: '#3458b9',
          label: '#445464'
    

      },
      spacing: {

      },
      fonts: {
          m: '14px',
          s: '12px',
          l: '16px',
          xl: '20px',
          xxl: '24px'

      }
      
    // Future theme properties (fonts, spacing, etc.) can be added here
  };

  class Button extends HTMLElement {
      constructor() {
          super();
          const { colors, fonts } = theme;
          const shadow = this.attachShadow({ mode: 'open' });
        
          // attributes
          /**
           * 
           * type: 'primary' | 'secondary' | 'outlined' | 'text' | 'success' | 'error' | 'info' | 'warning'
           * label: string
           * size: 'medium' | 'small' | 'large'
           * rounded: boolean
           * disabled: boolean
           */
          const type = this.getAttribute('type') || 'primary';
          const label = this.textContent.trim() || 'Button';
          const size = this.getAttribute('size') || 'medium';
          const rounded = this.hasAttribute('rounded') || false;
          const disabled = this.hasAttribute('disabled') || false;
          // separate variant will require nested styling
          // const variant = this.getAttribute('variant') || 'default';



          const style = document.createElement('style');
          style.textContent = `
      .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-size: ${fonts.m};
        font-weight: 500;
        line-height: 1.5;
        text-align: center;
        text-decoration: none;
        white-space: nowrap;
        cursor: pointer;
        border: none;
        border-radius: 4px;
        padding: 8px 16px;
        transition: all 0.2s ease-in-out;
      }
      .primary {
        background-color: ${colors.primary};
        color: white;
      }
      .secondary {
        background-color: ${colors.secondary};
        color: ${colors.primary};
      }
      .outlined {
        border: 1px solid ${colors.primary};
        background: white;
        color: ${colors.primary};
      }
      .text {
        background: none;
        color: ${colors.text};
        text-decoration: underline;
      }
        .success {
         background: ${colors.success};
         color: white;
        }
         .info {
          background: ${colors.info};
          color: white;
         }
          .warning {
          background: ${colors.warning};
          color: white;
          }
          .error {
          background: ${colors.error};
          color: white;
          }
          .small {
            font-size: ${fonts.s};
            padding: 3px 9px;
          }
            .large {
            font-size: ${fonts.l};
            padding: 5px 25px;
            }
            .rounded {
            border-radius: 12px;
            }
            .disabled {
             opacity: 0.8;
             cursor: not-allowed;
             
            }
      .btn:hover {
        opacity: 0.8;
      }
    `;

      const btn = document.createElement('button');
          btn.textContent = label;
          btn.disabled = disabled;
      btn.className = `btn ${type} ${size} ${rounded ? 'rounded' : ''} ${disabled ? 'disabled' : ''}`;

          btn.addEventListener('click', (e) => {
              if (!disabled) {
                  e.stopPropagation();
                  this.dispatchEvent(new Event('click'));
              }
  });
          
      shadow.appendChild(style);
      shadow.appendChild(btn);
    }
  }

  customElements.define('fj-button', Button);

  class Text extends HTMLElement {
      constructor() {
          super();
          const { colors, fonts } = theme;
          const shadow = this.attachShadow({ mode: 'open' });
        
          // attributes
          /**
           * bold: boolean
           * semiBold: boolean
           * italic: boolean
           * underline: boolean
           * type: 'default' | 'h1' | 'h2' | 'h3' | 'label'
           * variant: 'default' | 'success' | 'warning' | 'info' | 'error'
           */
          const variant = this.getAttribute('variant') || 'default';
          const type = this.getAttribute('type') || 'default';
          const italic = this.hasAttribute('italic') || false;
          const underline = this.hasAttribute('underline') || false;
          const bold = this.hasAttribute('bold') || false;
          const semiBold = this.hasAttribute('semiBold') || false;
          
          const label = this.textContent.trim() || 'Text';



          const style = document.createElement('style');
          style.textContent = `
      .text {
       font-size: ${fonts.medium};
       color: ${colors.text};
      }
       .success {
        color: ${colors.success};
       }
        .warning {
        color: ${colors.warning};
        }
        .info {
        color: ${colors.info};
        }
        .error {
        color: ${colors.error};
        }
        .h1 {
        font-size: ${fonts.xxl};
        font-weight: 700;
        }


.h2 {
        font-size: ${fonts.xl};
        font-weight: 700;
        }

.h3 {
        font-size: ${fonts.l};
        font-weight: 700;
        }

        .label {
            font-size: ${fonts.m};
            color: ${colors.label};
        }

        .bold {
        font-weight: 700;
        }

        .semiBold {
        font-weight: 600;
        }

        .italic {
        font-style: italic;
        }
        .underline {
        text-decoration: underline;
        }
    `;

      const text = document.createElement('span');
          text.textContent = label;
          
      text.className = `text ${variant} ${type} ${italic ? 'italic' : ''} ${underline ? 'underline' : ''} ${semiBold ? 'semiBold' : ''} ${bold ? 'bold' : ''}`;
      
          
      shadow.appendChild(style);
      shadow.appendChild(text);
    }
  }

  customElements.define('fj-text', Text);

})();
